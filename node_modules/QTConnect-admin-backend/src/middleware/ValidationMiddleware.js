const UserValidator = require('../validation/UserValidator');
const { logger } = require('../utils/Logger');
const { metrics } = require('../utils/Metrics');
const { createError } = require('./ErrorHandler');

/**
 * Validation middleware for API endpoints
 */

class ValidationMiddleware {
  /**
   * Constructor for the ValidationMiddleware class
   */

  constructor() {
    /**
     * Initialize the user validator
     */
    
    this.userValidator = new UserValidator();
  }

  /**
   * Middleware to validate user creation data
   * @param {Object} req - Express request object
   * @param {Object} res - Express response object
   * @param {Function} next - Express next function
   */
  validateUserCreate = async (req, res, next) => {
    const startTime = Date.now();

    try {
      const validationResult = await this.userValidator.validateCreate(req.body);
      
      if (!validationResult.isValid) {
        const duration = (Date.now() - startTime) / 1000;
        
        // Log validation error
        logger.logValidationError('User', validationResult, req.body);
        
        // Record metrics
        metrics.recordValidation('user', 'error', duration);
        
        // Create and throw validation error
        const error = createError('Validation failed', {
          status: 400,
          type: 'validation_error',
          validationResult,
          requestInfo: { 
            operation: 'createUser', 
            data: req.body,
            endpoint: req.originalUrl,
            method: req.method
          }
        });
        
        return next(error);
      }

      // Record successful validation metrics
      const duration = (Date.now() - startTime) / 1000;
      metrics.recordValidation('user', 'success', duration);

      // Validation passed, continue to next middleware/controller
      next();
    } catch (error) {
      const duration = (Date.now() - startTime) / 1000;
      metrics.recordValidation('user', 'error', duration);
      
      logger.error('Validation middleware error', error);
      next(error);
    }
  };

  /**
   * Middleware to validate user update data
   * @param {Object} req - Express request object
   * @param {Object} res - Express response object
   * @param {Function} next - Express next function
   */
  validateUserUpdate = async (req, res, next) => {
    const startTime = Date.now();

    try {
      const userId = parseInt(req.params.id);
      
      if (isNaN(userId)) {
        const error = createError('Invalid user ID', {
          status: 400,
          type: 'validation_error',
          requestInfo: { 
            operation: 'updateUser', 
            userId: req.params.id,
            endpoint: req.originalUrl,
            method: req.method
          }
        });
        return next(error);
      }

      const validationResult = await this.userValidator.validateUpdate(req.body, userId);
      
      if (!validationResult.isValid) {
        const duration = (Date.now() - startTime) / 1000;
        
        // Log validation error
        logger.logValidationError('User', validationResult, req.body);
        
        // Record metrics
        metrics.recordValidation('user', 'error', duration);
        
        // Create and throw validation error
        const error = createError('Validation failed', {
          status: 400,
          type: 'validation_error',
          validationResult,
          requestInfo: { 
            operation: 'updateUser', 
            userId,
            data: req.body,
            endpoint: req.originalUrl,
            method: req.method
          }
        });
        
        return next(error);
      }

      // Record successful validation metrics
      const duration = (Date.now() - startTime) / 1000;
      metrics.recordValidation('user', 'success', duration);

      // Validation passed, continue to next middleware/controller
      next();
    } catch (error) {
      const duration = (Date.now() - startTime) / 1000;
      metrics.recordValidation('user', 'error', duration);
      
      logger.error('Validation middleware error', error);
      next(error);
    }
  };

  /**
   * Middleware to validate user ID parameter
   * @param {Object} req - Express request object
   * @param {Object} res - Express response object
   * @param {Function} next - Express next function
   */
  validateUserId = (req, res, next) => {
    const userId = parseInt(req.params.id);
    
    if (isNaN(userId) || userId <= 0) {
      const error = createError('Invalid user ID', {
        status: 400,
        type: 'validation_error',
        requestInfo: { 
          operation: 'validateUserId', 
          userId: req.params.id,
          endpoint: req.originalUrl,
          method: req.method
        }
      });
      return next(error);
    }

    // Add parsed userId to request for use in controllers
    req.parsedUserId = userId;
    next();
  };

  /**
   * Middleware to validate query parameters for user listing
   * @param {Object} req - Express request object
   * @param {Object} res - Express response object
   * @param {Function} next - Express next function
   */
  validateUserQuery = (req, res, next) => {
    const { page, limit, role, status, sortBy, sortOrder } = req.query;

    // Validate page parameter
    if (page && (isNaN(page) || parseInt(page) < 1)) {
      const error = createError('Invalid page parameter', {
        status: 400,
        type: 'validation_error',
        requestInfo: { 
          operation: 'validateUserQuery', 
          page,
          endpoint: req.originalUrl,
          method: req.method
        }
      });
      return next(error);
    }

    // Validate limit parameter
    if (limit && (isNaN(limit) || parseInt(limit) < 1 || parseInt(limit) > 100)) {
      const error = createError('Invalid limit parameter (must be between 1 and 100)', {
        status: 400,
        type: 'validation_error',
        requestInfo: { 
          operation: 'validateUserQuery', 
          limit,
          endpoint: req.originalUrl,
          method: req.method
        }
      });
      return next(error);
    }

    // Validate role parameter
    if (role && !['admin', 'user'].includes(role)) {
      const error = createError('Invalid role parameter', {
        status: 400,
        type: 'validation_error',
        requestInfo: { 
          operation: 'validateUserQuery', 
          role,
          endpoint: req.originalUrl,
          method: req.method
        }
      });
      return next(error);
    }

    // Validate status parameter
    if (status && !['active', 'inactive'].includes(status)) {
      const error = createError('Invalid status parameter', {
        status: 400,
        type: 'validation_error',
        requestInfo: { 
          operation: 'validateUserQuery', 
          status,
          endpoint: req.originalUrl,
          method: req.method
        }
      });
      return next(error);
    }

    // Validate sortBy parameter
    if (sortBy && !['id', 'email', 'role', 'status', 'created_at', 'updated_at'].includes(sortBy)) {
      const error = createError('Invalid sortBy parameter', {
        status: 400,
        type: 'validation_error',
        requestInfo: { 
          operation: 'validateUserQuery', 
          sortBy,
          endpoint: req.originalUrl,
          method: req.method
        }
      });
      return next(error);
    }

    // Validate sortOrder parameter
    if (sortOrder && !['asc', 'desc'].includes(sortOrder)) {
      const error = createError('Invalid sortOrder parameter', {
        status: 400,
        type: 'validation_error',
        requestInfo: { 
          operation: 'validateUserQuery', 
          sortOrder,
          endpoint: req.originalUrl,
          method: req.method
        }
      });
      return next(error);
    }

    next();
  };

  /**
   * Generic validation middleware factory
   * @param {Function} validator - Validator function
   * @param {string} operation - Operation name for logging
   * @returns {Function} Express middleware function
   */
  createValidationMiddleware(validator, operation) {
    return async (req, res, next) => {
      const startTime = Date.now();

      try {
        const validationResult = await validator(req.body);
        
        if (!validationResult.isValid) {
          const duration = (Date.now() - startTime) / 1000;
          
          logger.logValidationError('User', validationResult, req.body);
          metrics.recordValidation('user', 'error', duration);
          
          const error = createError('Validation failed', {
            status: 400,
            type: 'validation_error',
            validationResult,
            requestInfo: { 
              operation, 
              data: req.body,
              endpoint: req.originalUrl,
              method: req.method
            }
          });
          
          return next(error);
        }

        const duration = (Date.now() - startTime) / 1000;
        metrics.recordValidation('user', 'success', duration);
        next();
      } catch (error) {
        const duration = (Date.now() - startTime) / 1000;
        metrics.recordValidation('user', 'error', duration);
        
        logger.error('Validation middleware error', error);
        next(error);
      }
    };
  }
}

module.exports = ValidationMiddleware;
