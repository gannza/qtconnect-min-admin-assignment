const helmet = require('helmet');
const rateLimit = require('express-rate-limit');
const { logger } = require('../utils/Logger');
const { metrics } = require('../utils/Metrics');

/**
 * Security middleware configuration
 */
class SecurityMiddleware {
  /**
   * Setup security middleware
   * @param {Object} app - Express application
   */

  static setup(app) {
    // Helmet security headers
    app.use(helmet({
      contentSecurityPolicy: {
        directives: {
          defaultSrc: ["'self'"],
          styleSrc: ["'self'", "'unsafe-inline'"],
          scriptSrc: ["'self'"],
          imgSrc: ["'self'", "data:", "https:"],
        },
      },
      crossOriginEmbedderPolicy: false
    }));

    // Rate limiting
    /**
     * Rate limiting middleware
     * @param {Object} req - Express request object
     * @param {Object} res - Express response object
     * @param {Function} next - Express next function
     */

    const limiter = rateLimit({
      windowMs: parseInt(process.env.RATE_LIMIT_WINDOW_MS) || 15 * 60 * 1000, // 15 minutes
      max: parseInt(process.env.RATE_LIMIT_MAX_REQUESTS) || 100, // limit each IP to 100 requests per windowMs
      message: {
        error: 'Too many requests from this IP, please try again later.',
        retryAfter: Math.ceil((parseInt(process.env.RATE_LIMIT_WINDOW_MS) || 15 * 60 * 1000) / 1000)
      },
      standardHeaders: true,
      legacyHeaders: false,
      handler: (req, res) => {
        logger.logSecurityEvent('rate_limit_exceeded', {
          ip: req.ip,
          userAgent: req.get('User-Agent'),
          url: req.url,
          method: req.method
        });
        
        metrics.recordError('rate_limit_exceeded', 'medium');
        
        res.status(429).json({
          error: 'Too many requests from this IP, please try again later.',
          retryAfter: Math.ceil((parseInt(process.env.RATE_LIMIT_WINDOW_MS) || 15 * 60 * 1000) / 1000)
        });
      }
    });

    app.use('/api/', limiter);

    // Strict rate limiting for user creation
    /**
     * Strict rate limiting middleware for user creation
     * @param {Object} req - Express request object
     * @param {Object} res - Express response object
     * @param {Function} next - Express next function
     */
    
    const strictLimiter = rateLimit({
      windowMs: 15 * 60 * 1000, // 15 minutes
      max: 5, // limit each IP to 5 user creation requests per windowMs
      message: {
        error: 'Too many user creation requests, please try again later.',
        retryAfter: 900
      },
      standardHeaders: true,
      legacyHeaders: false,
      handler: (req, res) => {
        logger.logSecurityEvent('strict_rate_limit_exceeded', {
          ip: req.ip,
          userAgent: req.get('User-Agent'),
          url: req.url,
          method: req.method
        });
        
        metrics.recordError('strict_rate_limit_exceeded', 'high');
        
        res.status(429).json({
          error: 'Too many user creation requests, please try again later.',
          retryAfter: 900
        });
      }
    });

    app.use('/api/users', strictLimiter);

    // Trust proxy for accurate IP detection
    app.set('trust proxy', 1);

    // Security logging middleware
    app.use((req, res, next) => {
      // Log suspicious requests
      const suspiciousPatterns = [
        /\.\./, // Path traversal
        /<script/i, // XSS attempts
        /union\s+select/i, // SQL injection
        /eval\(/i, // Code injection
        /javascript:/i // JavaScript injection
      ];

      const isSuspicious = suspiciousPatterns.some(pattern => 
        pattern.test(req.url) || pattern.test(JSON.stringify(req.body))
      );

      if (isSuspicious) {
        logger.logSecurityEvent('suspicious_request', {
          ip: req.ip,
          userAgent: req.get('User-Agent'),
          url: req.url,
          method: req.method,
          body: req.body,
          headers: req.headers
        });
        
        metrics.recordError('suspicious_request', 'high');
      }

      next();
    });

    // Request size limiting
    /**
     * Request size limiting middleware
     * @param {Object} req - Express request object
     * @param {Object} res - Express response object
     * @param {Function} next - Express next function
     */

    app.use('/api/', (req, res, next) => {
      const contentLength = parseInt(req.get('Content-Length') || '0');
      const maxSize = 10 * 1024 * 1024; // 10MB

      if (contentLength > maxSize) {
        logger.logSecurityEvent('request_too_large', {
          ip: req.ip,
          contentLength,
          maxSize,
          url: req.url,
          method: req.method
        });
        
        metrics.recordError('request_too_large', 'medium');
        
        return res.status(413).json({
          error: 'Request entity too large',
          maxSize: `${maxSize / (1024 * 1024)}MB`
        });
      }

      next();
    });

    // CORS configuration
    /**
     * CORS middleware
     * @param {Object} req - Express request object
     * @param {Object} res - Express response object
     * @param {Function} next - Express next function
     */
    
    app.use((req, res, next) => {
      const origin = req.get('Origin');
      const allowedOrigins = process.env.ALLOWED_ORIGINS ? 
        process.env.ALLOWED_ORIGINS.split(',') : 
        ['http://localhost:8000'];

      if (origin && !allowedOrigins.includes(origin)) {
        logger.logSecurityEvent('cors_violation', {
          ip: req.ip,
          origin,
          allowedOrigins,
          url: req.url,
          method: req.method
        });
        
        metrics.recordError('cors_violation', 'medium');
      }

      next();
    });
  }
}

module.exports = {
  securityMiddleware: SecurityMiddleware.setup
};
