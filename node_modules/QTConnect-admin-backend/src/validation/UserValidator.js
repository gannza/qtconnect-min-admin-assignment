const BaseValidator = require('./BaseValidator');
const RequiredRule = require('./rules/RequiredRule');
const EmailRule = require('./rules/EmailRule');
const UniqueEmailRule = require('./rules/UniqueEmailRule');
const EnumRule = require('./rules/EnumRule');

/**
 * User validator following SOLID principles
 */
class UserValidator extends BaseValidator {
  constructor() {
    super();
    this.setupRules();
  }

  /**
   * Setup all validation rules for user data
   */
  setupRules() {
    // Email validation rules
    this.addRules('email', [
      new RequiredRule(),
      new EmailRule(),
      new UniqueEmailRule()
    ]);

    // Role validation rules
    this.addRules('role', [
      new EnumRule(['admin', 'user'])
    ]);

    // Status validation rules
    this.addRules('status', [
      new EnumRule(['active', 'inactive'])
    ]);
  }

  /**
   * Validate user creation data
   * @param {Object} data - User data to validate
   * @returns {Promise<ValidationResult>}
   */
  async validateCreate(data) {
    return this.validate(data);
  }

  /**
   * Validate user update data
   * @param {Object} data - User data to validate
   * @param {number} userId - ID of the user being updated
   * @returns {Promise<ValidationResult>}
   */
  async validateUpdate(data, userId) {
    // Add the user ID to the data for uniqueness checking
    const dataWithId = { ...data, id: userId };
    return this.validate(dataWithId);
  }

  /**
   * Validate user email specifically
   * @param {string} email - Email to validate
   * @param {number} userId - Optional user ID for uniqueness checking
   * @returns {Promise<ValidationResult>}
   */
  async validateEmail(email, userId = null) {
    const data = { email, id: userId };
    return this.validateFields(data, ['email']);
  }

  /**
   * Validate user role specifically
   * @param {string} role - Role to validate
   * @returns {Promise<ValidationResult>}
   */
  async validateRole(role) {
    return this.validateFields({ role }, ['role']);
  }

  /**
   * Validate user status specifically
   * @param {string} status - Status to validate
   * @returns {Promise<ValidationResult>}
   */
  async validateStatus(status) {
    return this.validateFields({ status }, ['status']);
  }

  /**
   * Get validation rules for user creation
   * @returns {Object} Rules configuration
   */
  getCreateRules() {
    return {
      email: ['required', 'email', 'unique_email'],
      role: ['enum:admin,user'],
      status: ['enum:active,inactive']
    };
  }

  /**
   * Get validation rules for user update
   * @returns {Object} Rules configuration
   */
  getUpdateRules() {
    return {
      email: ['email', 'unique_email'],
      role: ['enum:admin,user'],
      status: ['enum:active,inactive']
    };
  }
}

module.exports = UserValidator;
