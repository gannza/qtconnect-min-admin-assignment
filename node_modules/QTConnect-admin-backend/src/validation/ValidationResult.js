/**
 * Represents the result of a validation operation
 */
class ValidationResult {
  constructor(isValid = true, errors = []) {
    this.isValid = isValid;
    this.errors = errors;
  }

  /**
   * Add an error to the validation result
   * @param {string} field - The field name
   * @param {string} message - The error message
   * @param {string} rule - The rule that failed
   */
  addError(field, message, rule) {
    this.isValid = false;
    this.errors.push({
      field,
      message,
      rule,
      timestamp: new Date().toISOString()
    });
  }

  /**
   * Check if there are any errors for a specific field
   * @param {string} field - The field name
   * @returns {boolean}
   */
  hasFieldError(field) {
    return this.errors.some(error => error.field === field);
  }

  /**
   * Get all errors for a specific field
   * @param {string} field - The field name
   * @returns {Array}
   */
  getFieldErrors(field) {
    return this.errors.filter(error => error.field === field);
  }

  /**
   * Get the first error for a specific field
   * @param {string} field - The field name
   * @returns {Object|null}
   */
  getFirstFieldError(field) {
    const fieldErrors = this.getFieldErrors(field);
    return fieldErrors.length > 0 ? fieldErrors[0] : null;
  }

  /**
   * Merge another validation result into this one
   * @param {ValidationResult} other - Another validation result
   */
  merge(other) {
    if (!other.isValid) {
      this.isValid = false;
      this.errors.push(...other.errors);
    }
  }

  /**
   * Convert to a plain object
   * @returns {Object}
   */
  toJSON() {
    return {
      isValid: this.isValid,
      errors: this.errors
    };
  }

  /**
   * Create a successful validation result
   * @returns {ValidationResult}
   */
  static success() {
    return new ValidationResult(true, []);
  }

  /**
   * Create a failed validation result with errors
   * @param {Array} errors - Array of error objects
   * @returns {ValidationResult}
   */
  static failure(errors) {
    return new ValidationResult(false, errors);
  }
}

module.exports = ValidationResult;
