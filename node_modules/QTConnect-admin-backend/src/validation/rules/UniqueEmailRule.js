const ValidationRule = require('../contracts/ValidationRule');
const ValidationResult = require('../ValidationResult');
const User = require('../../models/User');

/**
 * Validates that an email is unique in the database
 */
class UniqueEmailRule extends ValidationRule {
  constructor() {
    super();
  }

  async validate(value, fieldName, data) {
    const result = new ValidationResult();

    if (value) {
      try {
        const existingUser = await User.findByEmail(value);
        
        // If updating a user, exclude the current user from the check
        if (existingUser && data.id && existingUser.id !== data.id) {
          result.addError(fieldName, this.getErrorMessage(fieldName, value), this.getName());
        } else if (existingUser && !data.id) {
          // Creating a new user
          result.addError(fieldName, this.getErrorMessage(fieldName, value), this.getName());
        }
      } catch (error) {
        // If there's a database error, we'll let it pass for now
        // In production, you might want to handle this differently
        console.error('Database error during email uniqueness check:', error);
      }
    }

    return result;
  }

  getErrorMessage(fieldName, value) {
    return `The ${fieldName} has already been taken.`;
  }

  getName() {
    return 'unique_email';
  }
}

module.exports = UniqueEmailRule;
